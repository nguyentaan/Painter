{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isLocale;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/*\r\n  = 3ALPHA              ; selected ISO 639 codes\r\n    *2(\"-\" 3ALPHA)      ; permanently reserved\r\n */\nvar extlang = '([A-Za-z]{3}(-[A-Za-z]{3}){0,2})';\n/*\r\n  = 2*3ALPHA            ; shortest ISO 639 code\r\n    [\"-\" extlang]       ; sometimes followed by\r\n                        ; extended language subtags\r\n  / 4ALPHA              ; or reserved for future use\r\n  / 5*8ALPHA            ; or registered language subtag\r\n */\n\nvar language = \"(([a-zA-Z]{2,3}(-\".concat(extlang, \")?)|([a-zA-Z]{5,8}))\");\n/*\r\n  = 4ALPHA              ; ISO 15924 code\r\n */\n\nvar script = '([A-Za-z]{4})';\n/*\r\n  = 2ALPHA              ; ISO 3166-1 code\r\n  / 3DIGIT              ; UN M.49 code\r\n */\n\nvar region = '([A-Za-z]{2}|\\\\d{3})';\n/*\r\n  = 5*8alphanum         ; registered variants\r\n  / (DIGIT 3alphanum)\r\n */\n\nvar variant = '([A-Za-z0-9]{5,8}|(\\\\d[A-Z-a-z0-9]{3}))';\n/*\r\n  = DIGIT               ; 0 - 9\r\n  / %x41-57             ; A - W\r\n  / %x59-5A             ; Y - Z\r\n  / %x61-77             ; a - w\r\n  / %x79-7A             ; y - z\r\n */\n\nvar singleton = '(\\\\d|[A-W]|[Y-Z]|[a-w]|[y-z])';\n/*\r\n  = singleton 1*(\"-\" (2*8alphanum))\r\n                        ; Single alphanumerics\r\n                        ; \"x\" reserved for private use\r\n */\n\nvar extension = \"(\".concat(singleton, \"(-[A-Za-z0-9]{2,8})+)\");\n/*\r\n  = \"x\" 1*(\"-\" (1*8alphanum))\r\n */\n\nvar privateuse = '(x(-[A-Za-z0-9]{1,8})+)'; // irregular tags do not match the 'langtag' production and would not\n// otherwise be considered 'well-formed'. These tags are all valid, but\n// most are deprecated in favor of more modern subtags or subtag combination\n\nvar irregular = '((en-GB-oed)|(i-ami)|(i-bnn)|(i-default)|(i-enochian)|' + '(i-hak)|(i-klingon)|(i-lux)|(i-mingo)|(i-navajo)|(i-pwn)|(i-tao)|' + '(i-tay)|(i-tsu)|(sgn-BE-FR)|(sgn-BE-NL)|(sgn-CH-DE))'; // regular tags match the 'langtag' production, but their subtags are not\n// extended language or variant subtags: their meaning is defined by\n// their registration and all of these are deprecated in favor of a more\n// modern subtag or sequence of subtags\n\nvar regular = '((art-lojban)|(cel-gaulish)|(no-bok)|(no-nyn)|(zh-guoyu)|' + '(zh-hakka)|(zh-min)|(zh-min-nan)|(zh-xiang))';\n/*\r\n  = irregular           ; non-redundant tags registered\r\n  / regular             ; during the RFC 3066 era\r\n\r\n */\n\nvar grandfathered = \"(\".concat(irregular, \"|\").concat(regular, \")\");\n/*\r\n  RFC 5646 defines delimitation of subtags via a hyphen:\r\n\r\n      \"Subtag\" refers to a specific section of a tag, delimited by a\r\n      hyphen, such as the subtags 'zh', 'Hant', and 'CN' in the tag \"zh-\r\n      Hant-CN\".  Examples of subtags in this document are enclosed in\r\n      single quotes ('Hant')\r\n\r\n  However, we need to add \"_\" to maintain the existing behaviour.\r\n */\n\nvar delimiter = '(-|_)';\n/*\r\n  = language\r\n    [\"-\" script]\r\n    [\"-\" region]\r\n    *(\"-\" variant)\r\n    *(\"-\" extension)\r\n    [\"-\" privateuse]\r\n */\n\nvar langtag = \"\".concat(language, \"(\").concat(delimiter).concat(script, \")?(\").concat(delimiter).concat(region, \")?(\").concat(delimiter).concat(variant, \")*(\").concat(delimiter).concat(extension, \")*(\").concat(delimiter).concat(privateuse, \")?\");\n/*\r\n  Regex implementation based on BCP RFC 5646\r\n  Tags for Identifying Languages\r\n  https://www.rfc-editor.org/rfc/rfc5646.html\r\n */\n\nvar languageTagRegex = new RegExp(\"(^\".concat(privateuse, \"$)|(^\").concat(grandfathered, \"$)|(^\").concat(langtag, \"$)\"));\nfunction isLocale(str) {\n  (0, _assertString.default)(str);\n  return languageTagRegex.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","isLocale","_assertString","_interopRequireDefault","require","obj","__esModule","extlang","language","concat","script","region","variant","singleton","extension","privateuse","irregular","regular","grandfathered","delimiter","langtag","languageTagRegex","RegExp","str","test","module"],"sources":["C:/Thuchanh/Painter/frontend/node_modules/validator/lib/isLocale.js"],"sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = isLocale;\r\n\r\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/*\r\n  = 3ALPHA              ; selected ISO 639 codes\r\n    *2(\"-\" 3ALPHA)      ; permanently reserved\r\n */\r\nvar extlang = '([A-Za-z]{3}(-[A-Za-z]{3}){0,2})';\r\n/*\r\n  = 2*3ALPHA            ; shortest ISO 639 code\r\n    [\"-\" extlang]       ; sometimes followed by\r\n                        ; extended language subtags\r\n  / 4ALPHA              ; or reserved for future use\r\n  / 5*8ALPHA            ; or registered language subtag\r\n */\r\n\r\nvar language = \"(([a-zA-Z]{2,3}(-\".concat(extlang, \")?)|([a-zA-Z]{5,8}))\");\r\n/*\r\n  = 4ALPHA              ; ISO 15924 code\r\n */\r\n\r\nvar script = '([A-Za-z]{4})';\r\n/*\r\n  = 2ALPHA              ; ISO 3166-1 code\r\n  / 3DIGIT              ; UN M.49 code\r\n */\r\n\r\nvar region = '([A-Za-z]{2}|\\\\d{3})';\r\n/*\r\n  = 5*8alphanum         ; registered variants\r\n  / (DIGIT 3alphanum)\r\n */\r\n\r\nvar variant = '([A-Za-z0-9]{5,8}|(\\\\d[A-Z-a-z0-9]{3}))';\r\n/*\r\n  = DIGIT               ; 0 - 9\r\n  / %x41-57             ; A - W\r\n  / %x59-5A             ; Y - Z\r\n  / %x61-77             ; a - w\r\n  / %x79-7A             ; y - z\r\n */\r\n\r\nvar singleton = '(\\\\d|[A-W]|[Y-Z]|[a-w]|[y-z])';\r\n/*\r\n  = singleton 1*(\"-\" (2*8alphanum))\r\n                        ; Single alphanumerics\r\n                        ; \"x\" reserved for private use\r\n */\r\n\r\nvar extension = \"(\".concat(singleton, \"(-[A-Za-z0-9]{2,8})+)\");\r\n/*\r\n  = \"x\" 1*(\"-\" (1*8alphanum))\r\n */\r\n\r\nvar privateuse = '(x(-[A-Za-z0-9]{1,8})+)'; // irregular tags do not match the 'langtag' production and would not\r\n// otherwise be considered 'well-formed'. These tags are all valid, but\r\n// most are deprecated in favor of more modern subtags or subtag combination\r\n\r\nvar irregular = '((en-GB-oed)|(i-ami)|(i-bnn)|(i-default)|(i-enochian)|' + '(i-hak)|(i-klingon)|(i-lux)|(i-mingo)|(i-navajo)|(i-pwn)|(i-tao)|' + '(i-tay)|(i-tsu)|(sgn-BE-FR)|(sgn-BE-NL)|(sgn-CH-DE))'; // regular tags match the 'langtag' production, but their subtags are not\r\n// extended language or variant subtags: their meaning is defined by\r\n// their registration and all of these are deprecated in favor of a more\r\n// modern subtag or sequence of subtags\r\n\r\nvar regular = '((art-lojban)|(cel-gaulish)|(no-bok)|(no-nyn)|(zh-guoyu)|' + '(zh-hakka)|(zh-min)|(zh-min-nan)|(zh-xiang))';\r\n/*\r\n  = irregular           ; non-redundant tags registered\r\n  / regular             ; during the RFC 3066 era\r\n\r\n */\r\n\r\nvar grandfathered = \"(\".concat(irregular, \"|\").concat(regular, \")\");\r\n/*\r\n  RFC 5646 defines delimitation of subtags via a hyphen:\r\n\r\n      \"Subtag\" refers to a specific section of a tag, delimited by a\r\n      hyphen, such as the subtags 'zh', 'Hant', and 'CN' in the tag \"zh-\r\n      Hant-CN\".  Examples of subtags in this document are enclosed in\r\n      single quotes ('Hant')\r\n\r\n  However, we need to add \"_\" to maintain the existing behaviour.\r\n */\r\n\r\nvar delimiter = '(-|_)';\r\n/*\r\n  = language\r\n    [\"-\" script]\r\n    [\"-\" region]\r\n    *(\"-\" variant)\r\n    *(\"-\" extension)\r\n    [\"-\" privateuse]\r\n */\r\n\r\nvar langtag = \"\".concat(language, \"(\").concat(delimiter).concat(script, \")?(\").concat(delimiter).concat(region, \")?(\").concat(delimiter).concat(variant, \")*(\").concat(delimiter).concat(extension, \")*(\").concat(delimiter).concat(privateuse, \")?\");\r\n/*\r\n  Regex implementation based on BCP RFC 5646\r\n  Tags for Identifying Languages\r\n  https://www.rfc-editor.org/rfc/rfc5646.html\r\n */\r\n\r\nvar languageTagRegex = new RegExp(\"(^\".concat(privateuse, \"$)|(^\").concat(grandfathered, \"$)|(^\").concat(langtag, \"$)\"));\r\n\r\nfunction isLocale(str) {\r\n  (0, _assertString.default)(str);\r\n  return languageTagRegex.test(str);\r\n}\r\n\r\nmodule.exports = exports.default;\r\nmodule.exports.default = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}