{"ast":null,"code":"import axios from \"axios\";\n\n//Production\n// const url = 'https://backendpainter-v1.onrender.com';\n//Testing\nconst url = 'http://localhost:8081';\n\n// export const loginAdmin = (data) => {\n//   console.log(\"data of admin : \" , data)\n//   return async (dispatch) => {\n//     try {\n//       const response = await axios.post(`${url}/loginadmin`, data);\n//       const output = response.data;\n\n//       if (output.status === \"success\") {\n//         dispatch({\n//           type: \"LOGIN_ADMIN_SUCCESS\",\n//           payload: output.token,\n//         });\n//       }\n//     } catch (error) {\n//       const output = error.response.data;\n//       dispatch({\n//         type: \"LOGIN_ADMIN_FAILED\",\n//         payload: output.error,\n//       });\n//     }\n//   };\n// };\n\n// export const userLoginFacebook = (data) => {\n//   // remember to make if the name is same that directly proceed to login.\n//   var facebookName = data.name;\n//   // delete space between text & lowercase them.\n//   let removedSpacesFacebookName = facebookName.split(\" \").join(\"\");\n//   let fixLowercasedFacebookName = removedSpacesFacebookName.toLowerCase();\n\n//   // get only 4 unique number from id to avoid phoneNumber backend validation\n//   var uniqueNumberOfId = data.id.substr(data.id.length - 4);\n\n//   let autoRegisterWithFacebook = {\n//     username: fixLowercasedFacebookName,\n//     email: `fb+${data.email}`,\n//     phoneNumber: `00001111${uniqueNumberOfId}`,\n//     password: \"00001111\",\n//   };\n//   return async (dispatch) => {\n//     try {\n//       const responseRegister = await axios.post(\n//         `${url}/users/register`,\n//         autoRegisterWithFacebook\n//       );\n//       if (responseRegister.data.status === \"success\") {\n//         // auto login\n//         let autoLoginWithFacebook = {\n//           email: `fb+${data.email}`,\n//           password: \"00001111\",\n//         };\n//         try {\n//           const response = await axios.post(\n//             `${url}/users/login`,\n//             autoLoginWithFacebook\n//           );\n\n//           const output = response.data;\n\n//           if (output.status === \"success\") {\n//             dispatch({\n//               type: \"LOGIN_USER_SUCCESS\",\n//               payload: output.token,\n//             });\n//           }\n//         } catch (error) {\n//           const output = error.response.data;\n//           console.log(output);\n//         }\n//       } else {\n//         return false;\n//       }\n//     } catch (error) {\n//       const output = error.response.data;\n//       if (output.status === \"error\") {\n//         // auto login\n//         let autoLoginWithFacebook = {\n//           email: `fb+${data.email}`,\n//           password: \"00001111\",\n//         };\n//         try {\n//           const response = await axios.post(\n//             `${url}/users/login`,\n//             autoLoginWithFacebook\n//           );\n\n//           const output = response.data;\n\n//           if (output.status === \"success\") {\n//             dispatch({\n//               type: \"LOGIN_USER_SUCCESS\",\n//               payload: output.token,\n//             });\n//           }\n//         } catch (error) {\n//           const output = error.response.data;\n//           console.log(output);\n//         }\n//       } else {\n//         return false;\n//       }\n//     }\n//     // return (dispatch) => {\n//     //   dispatch({\n//     //     type: \"USER_LOGIN_FACEBOOK\",\n//     //     payload: data,\n//     //   });\n//     // };\n//   };\n// };\n\nexport const loginUser = data => {\n  return async dispatch => {\n    try {\n      const response = await axios.post(`${url}/login`, data);\n      const output = response.data;\n      if (output.status === \"success\") {\n        dispatch({\n          type: \"LOGIN_USER_SUCCESS\",\n          payload: output.token\n        });\n      }\n    } catch (error) {\n      const output = error.response.data;\n      dispatch({\n        type: \"LOGIN_USER_FAILED\",\n        payload: output.error\n      });\n    }\n  };\n};\nexport const registerUser = data => {\n  return async dispatch => {\n    try {\n      const response = await axios.post(`${url}/register`, data);\n      console.log(response);\n      const output = response.data;\n      if (output.status === \"success\") {\n        dispatch({\n          type: \"REGISTER_USER_SUCCESS\",\n          payload: output.message\n        });\n      }\n    } catch (error) {\n      const output = error.response.data;\n      if (output.message) {\n        dispatch({\n          type: \"REGISTER_USER_FAIL\",\n          payload: output.message\n        });\n      } else {\n        dispatch({\n          // error of same username/email/phoneNumber,it has to be unique no duplication/same username.\n          type: \"REGISTER_USER_INVALID\",\n          payload: output.error\n        });\n      }\n    }\n  };\n};\nexport const userLogout = () => {\n  return dispatch => {\n    dispatch({\n      type: \"LOGOUT_USER\"\n    });\n  };\n};","map":{"version":3,"names":["axios","url","loginUser","data","dispatch","response","post","output","status","type","payload","token","error","registerUser","console","log","message","userLogout"],"sources":["C:/Thuchanh/Painter/frontend/src/actionCreators/LoginAction.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n//Production\r\n// const url = 'https://backendpainter-v1.onrender.com';\r\n//Testing\r\nconst url = 'http://localhost:8081';\r\n\r\n// export const loginAdmin = (data) => {\r\n//   console.log(\"data of admin : \" , data)\r\n//   return async (dispatch) => {\r\n//     try {\r\n//       const response = await axios.post(`${url}/loginadmin`, data);\r\n//       const output = response.data;\r\n\r\n//       if (output.status === \"success\") {\r\n//         dispatch({\r\n//           type: \"LOGIN_ADMIN_SUCCESS\",\r\n//           payload: output.token,\r\n//         });\r\n//       }\r\n//     } catch (error) {\r\n//       const output = error.response.data;\r\n//       dispatch({\r\n//         type: \"LOGIN_ADMIN_FAILED\",\r\n//         payload: output.error,\r\n//       });\r\n//     }\r\n//   };\r\n// };\r\n\r\n// export const userLoginFacebook = (data) => {\r\n//   // remember to make if the name is same that directly proceed to login.\r\n//   var facebookName = data.name;\r\n//   // delete space between text & lowercase them.\r\n//   let removedSpacesFacebookName = facebookName.split(\" \").join(\"\");\r\n//   let fixLowercasedFacebookName = removedSpacesFacebookName.toLowerCase();\r\n\r\n//   // get only 4 unique number from id to avoid phoneNumber backend validation\r\n//   var uniqueNumberOfId = data.id.substr(data.id.length - 4);\r\n\r\n//   let autoRegisterWithFacebook = {\r\n//     username: fixLowercasedFacebookName,\r\n//     email: `fb+${data.email}`,\r\n//     phoneNumber: `00001111${uniqueNumberOfId}`,\r\n//     password: \"00001111\",\r\n//   };\r\n//   return async (dispatch) => {\r\n//     try {\r\n//       const responseRegister = await axios.post(\r\n//         `${url}/users/register`,\r\n//         autoRegisterWithFacebook\r\n//       );\r\n//       if (responseRegister.data.status === \"success\") {\r\n//         // auto login\r\n//         let autoLoginWithFacebook = {\r\n//           email: `fb+${data.email}`,\r\n//           password: \"00001111\",\r\n//         };\r\n//         try {\r\n//           const response = await axios.post(\r\n//             `${url}/users/login`,\r\n//             autoLoginWithFacebook\r\n//           );\r\n\r\n//           const output = response.data;\r\n\r\n//           if (output.status === \"success\") {\r\n//             dispatch({\r\n//               type: \"LOGIN_USER_SUCCESS\",\r\n//               payload: output.token,\r\n//             });\r\n//           }\r\n//         } catch (error) {\r\n//           const output = error.response.data;\r\n//           console.log(output);\r\n//         }\r\n//       } else {\r\n//         return false;\r\n//       }\r\n//     } catch (error) {\r\n//       const output = error.response.data;\r\n//       if (output.status === \"error\") {\r\n//         // auto login\r\n//         let autoLoginWithFacebook = {\r\n//           email: `fb+${data.email}`,\r\n//           password: \"00001111\",\r\n//         };\r\n//         try {\r\n//           const response = await axios.post(\r\n//             `${url}/users/login`,\r\n//             autoLoginWithFacebook\r\n//           );\r\n\r\n//           const output = response.data;\r\n\r\n//           if (output.status === \"success\") {\r\n//             dispatch({\r\n//               type: \"LOGIN_USER_SUCCESS\",\r\n//               payload: output.token,\r\n//             });\r\n//           }\r\n//         } catch (error) {\r\n//           const output = error.response.data;\r\n//           console.log(output);\r\n//         }\r\n//       } else {\r\n//         return false;\r\n//       }\r\n//     }\r\n//     // return (dispatch) => {\r\n//     //   dispatch({\r\n//     //     type: \"USER_LOGIN_FACEBOOK\",\r\n//     //     payload: data,\r\n//     //   });\r\n//     // };\r\n//   };\r\n// };\r\n\r\nexport const loginUser = (data) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.post(`${url}/login`, data);\r\n      const output = response.data;\r\n\r\n      if (output.status === \"success\") {\r\n        dispatch({\r\n          type: \"LOGIN_USER_SUCCESS\",\r\n          payload: output.token,\r\n        });\r\n        \r\n      }\r\n    } catch (error) {\r\n      const output = error.response.data;\r\n      dispatch({\r\n        type: \"LOGIN_USER_FAILED\",\r\n        payload: output.error,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const registerUser = (data) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await axios.post(`${url}/register`, data);\r\n      console.log(response);\r\n\r\n      const output = response.data;\r\n      if (output.status === \"success\") {\r\n        dispatch({\r\n          type: \"REGISTER_USER_SUCCESS\",\r\n          payload: output.message,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      const output = error.response.data;\r\n      if (output.message) {\r\n        dispatch({\r\n          type: \"REGISTER_USER_FAIL\",\r\n          payload: output.message,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          // error of same username/email/phoneNumber,it has to be unique no duplication/same username.\r\n          type: \"REGISTER_USER_INVALID\",\r\n          payload: output.error,\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const userLogout = () => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"LOGOUT_USER\",\r\n    });\r\n  };\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA,MAAMC,GAAG,GAAG,uBAAuB;;AAEnjC,OAAO,MAAOC,QAAQ,IAAK;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAE,GAAEL,GAAI,QAAO,EAAEE,IAAI,CAAC;MACvD,MAAMI,MAAM,GAAGF,QAAQ,CAACF,IAAI;MAE5B,IAAII,MAAM,CAACC,MAAM,KAAK,SAAS,EAAE;QAC/BJ,QAAQ,CAAC;UACPK,IAAI,EAAE,oBAAoB;UAC1BC,OAAO,EAAEH,MAAM,CAACI;QAClB,CAAC,CAAC;MAEJ;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAML,MAAM,GAAGK,KAAK,CAACP,QAAQ,CAACF,IAAI;MAClCC,QAAQ,CAAC;QACPK,IAAI,EAAE,mBAAmB;QACzBC,OAAO,EAAEH,MAAM,CAACK;MAClB,CAAC,CAAC;IACJ;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIV,IAAI,IAAK;EACpC,OAAO,MAAOC,QAAQ,IAAK;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAE,GAAEL,GAAI,WAAU,EAAEE,IAAI,CAAC;MAC1DW,OAAO,CAACC,GAAG,CAACV,QAAQ,CAAC;MAErB,MAAME,MAAM,GAAGF,QAAQ,CAACF,IAAI;MAC5B,IAAII,MAAM,CAACC,MAAM,KAAK,SAAS,EAAE;QAC/BJ,QAAQ,CAAC;UACPK,IAAI,EAAE,uBAAuB;UAC7BC,OAAO,EAAEH,MAAM,CAACS;QAClB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd,MAAML,MAAM,GAAGK,KAAK,CAACP,QAAQ,CAACF,IAAI;MAClC,IAAII,MAAM,CAACS,OAAO,EAAE;QAClBZ,QAAQ,CAAC;UACPK,IAAI,EAAE,oBAAoB;UAC1BC,OAAO,EAAEH,MAAM,CAACS;QAClB,CAAC,CAAC;MACJ,CAAC,MAAM;QACLZ,QAAQ,CAAC;UACP;UACAK,IAAI,EAAE,uBAAuB;UAC7BC,OAAO,EAAEH,MAAM,CAACK;QAClB,CAAC,CAAC;MACJ;IACF;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMK,UAAU,GAAGA,CAAA,KAAM;EAC9B,OAAQb,QAAQ,IAAK;IACnBA,QAAQ,CAAC;MACPK,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}